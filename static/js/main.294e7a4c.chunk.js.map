{"version":3,"sources":["assets/imgs/icon_leaf.svg","pages/stats_component/StatsComponent.module.scss","pages/auth/signup/SignUp.module.scss","pages/auth/singup_admin/SignUpAdmin.module.scss","components/asset_summary_graph/AssetSummaryGraph.module.scss","assets/imgs/icon_eye.svg","assets/imgs/icon_lock.svg","assets/imgs/fraudbuster_logo.svg","assets/imgs/icon_category.svg","pages/auth/login/Login.module.scss","pages/home/Home.module.scss","pages/results_component/ResultsComponent.module.scss","actions/AuthTypes.ts","Routes/entry_page_routes/Entry.page.route.tsx","actions/auth_actions.ts","actions/NotificationTypes.ts","actions/notification_actions.ts","actions/SourcesTypes.ts","actions/sources_actions.ts","services/urls.ts","pages/entry/Entry.page.tsx","components/vendor/rounded_indicator_tab/RoundedIndicatorTab.tsx","components/base/Base.tsx","components/notification/NotificationWrapper.tsx","components/vendor/textfield/borderless_textfield/BorderlessTextField.tsx","components/asset_summary_graph/AssetSummaryGraph.jsx","pages/home/Home.page.tsx","services/BaseService.ts","services/AuthService.ts","pages/auth/login/Login.page.tsx","pages/auth/Auth.page.tsx","pages/auth/signup/SignUp.page.tsx","pages/auth/singup_admin/SignUpAdmin.page.tsx","pages/results_component/ResultComponent.page.tsx","pages/stats_component/StatsComponent.page.tsx","reducers/AuthReducers.ts","reducers/NotificationReducers.ts","reducers/SourcesReducers.ts","reducers/index.ts","store/store.ts","App.tsx","serviceWorker.ts","index.tsx","assets/imgs/icon_message.svg","components/notification/NotificationWrapper.module.scss","components/vendor/textfield/borderless_textfield/BorderlessTextField.module.scss","pages/auth/Auth.module.scss","assets/imgs/icon_key.svg","assets/imgs/icon_person.svg"],"names":["module","exports","AuthTypes","EntryPageRoute","props","url","saveData","saveResult","data","result","path","exact","render","routeProps","ResultsPage","HomePage","NotificationTypes","SourcesTypes","prefixer","authUrls","SIGNINUSER","LOGINUSER","LOGOUTUSER","RESET_PASSWORD","SIGNUP","hostIp","EntryPageComponent","state","signed_in","onMount","client","Paho","MQTT","Client","Number","newNotification","newSources","onConnectionLost","responseObject","errorCode","id","Date","getTime","text","variant","console","log","errorMessage","onMessageArrived","message","sources","payloadString","split","map","source","sourceElements","topic","title","desc","connect","onSuccess","subscribe","setState","this","React","EntryPage","store","dispatch","notification","type","NEW","payload","NEW_SOURCES","queueRef","useRef","useState","open","setOpen","undefined","currentNotification","setCurrentNotification","processQueue","current","length","shift","handleClick","push","handlingClick","useEffect","u","includes","handleClose","event","reason","Snackbar","key","anchorOrigin","vertical","origin","horizontal","autoHideDuration","onClose","onExited","ContentProps","MySnackbarContentWrapper","className","styles","snackbar","variantIcon","success","CheckCircleIcon","warning","WarningIcon","error","ErrorIcon","info","InfoIcon","other","Icon","SnackbarContent","classNames","aria-describedby","icon","iconVariant","action","IconButton","aria-label","color","onClick","BorderlessTextField","otherClasses","container","label","classes","classes_root","root","dummy","restClasses","InputProps","input","select","children","rest","renderTextField","textfield_input","textfield_root","Boolean","margin","AssetSummaryGraph","mounted","shouldRerender","plot","chart","width","height","xScale","d3","domain","d","stream_name","range","yScale","value","colorScale","selectAll","enter","append","classed","attr","bandwidth","style","i","yGridlines","scale","ticks","tickSize","tickFormat","call","xAxis","element","document","getElementById","offsetWidth","offsetHeight","drawChart","parsedSources","filter","datum","indexOf","reduce","acc","curr","sourceName","count","Object","keys","forEach","el","Element","svg","remove","chartWidth","chartHeight","toReact","Component","selectedSources","setSelectedSources","query","setQuery","heading","content","box_section","grid_width_full","multiline","rows","onChange","e","target","rowsMax","fullWidth","query_actions","accept","input_upload_file","multiple","filesData","fileToLoad","files","fileReader","FileReader","onload","fileLoadedEvent","textFromFileLoaded","readAsText","htmlFor","label_upload_file","Button","component","CloudUploadRounded","ExpansionPanel","expanded","panel","isExpanded","panelItem","ExpansionPanelSummary","expandIcon","aria-controls","panel_heading","ExpansionPanelDetails","align","CircularProgress","size","btn_next","messageString","join","Message","destinationName","send","history","KeyboardArrowRight","BaseService","getHeaders","isFile","headers","Headers","lang","localStorage","getItem","toString","getHeadersAuth","access_token","window","location","reload","checkStatus","response","status","Error","statusText","getToken","postRequest","body","required_auth","a","head","method","mode","cache","JSON","stringify","isoFetch","then","catch","err","postFileRequest","putRequest","patchRequest","deleteRequest","getRequest","AuthService","login","signUp","LoginPageComponent","sign_in","show_password","values","setSubmitting","saveLoginToAppState","responseStatus","json","responseData","firstName","fields","name","IconMessage","initialValues","email","password","onSubmit","actions","logging","validationSchema","Yup","shape","required","handleBlur","handleChange","handleSubmit","submitForm","isSubmitting","errors","touched","grid_system","sub_title","field","startAdornment","InputAdornment","position","src","adornLeft","endAdornment","cursor","IconLock","IconEye","adornRight","to","link","button","link_signup","auth","loginInfo","LOGIN","AuthPageComponent","dumm","background","Logo","logo","SignUpPageComponent","firstname","lastname","username","province","ref_id","IconPerson","IconKey","IconLeaf","btn_register","SignUpAdminPageComponent","org_email","org_name","category","org_licence_number","IconCategory","ResultsPageComponent","results","dataTopicClient","resultTopicClient","dataTopic","resultTopic","subscribeToDataTopic","onScroll","setTimeout","connected","subscribeToResultTopic","resultsBox","xHResult","scrollHeight","scrollTo","top","left","behavior","dataBox","xHBox","onFileDroped","handleAction","disconnect","match","StopRounded","responsive_columns","box","justifyItems","display","Link","StyledTableCell","withStyles","theme","createStyles","backgroundColor","palette","common","black","white","fontSize","TableCell","StyledTableRow","default","TableRow","createData","calories","fat","carbs","protein","useStyles","makeStyles","marginTop","spacing","overflowX","table","minWidth","StatsPageComponent","tableData","saveTabledata","tableData1","res","startsWith","substring","starttime","endtime","resultNumberSet","header","StartTime","EndTime","Paper","Table","TableHead","TableBody","row","rowItem","html2canvas","querySelector","canvas","base64Img","doc","jsPDF","addImage","save","anotherGenerate","toDataURL","btn_download","saveUserInfo","userInfo","logout","clear","initialState","userInfoString","expires_in","token_type","lastName","is_candidate","is_admin","is_technicien","is_publique","parse","getLocalStorageUserInfo","rootReducer","combineReducers","LOGOUT","load","createStore","App","CssBaseline","AuthPage","hostname","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.294e7a4c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon_leaf.11526d75.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"StatsComponent_container__1xkit\",\"heading\":\"StatsComponent_heading__2pVIV\",\"btn_download\":\"StatsComponent_btn_download__di9y4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid_system\":\"SignUp_grid_system__BYm_b\",\"container\":\"SignUp_container__HP_Y6\",\"content\":\"SignUp_content__3mWjo\",\"adornRight\":\"SignUp_adornRight__3lMOq\",\"adornLeft\":\"SignUp_adornLeft__1CZt6\",\"title\":\"SignUp_title__1DNfa\",\"sub_title\":\"SignUp_sub_title__2PsKq\",\"label\":\"SignUp_label__12YjZ\",\"actions\":\"SignUp_actions__2GF8N\",\"link\":\"SignUp_link__3sC52\",\"btn_register\":\"SignUp_btn_register__1Kp2h\",\"link_signup\":\"SignUp_link_signup__671Vl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid_system\":\"SignUpAdmin_grid_system__1fxSi\",\"container\":\"SignUpAdmin_container__2ZCBK\",\"content\":\"SignUpAdmin_content__7qM5p\",\"adornRight\":\"SignUpAdmin_adornRight__3kSGe\",\"adornLeft\":\"SignUpAdmin_adornLeft__4B0pZ\",\"title\":\"SignUpAdmin_title__1GR5k\",\"sub_title\":\"SignUpAdmin_sub_title__1u1uY\",\"label\":\"SignUpAdmin_label__1F8do\",\"actions\":\"SignUpAdmin_actions__2wtjF\",\"link\":\"SignUpAdmin_link__2oRVu\",\"btn_register\":\"SignUpAdmin_btn_register__VuE8c\",\"link_signup\":\"SignUpAdmin_link_signup__1K6mM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"AssetSummaryGraph_container__30I87\",\"chart\":\"AssetSummaryGraph_chart__2vO2Q\",\"bar\":\"AssetSummaryGraph_bar__1YrgO\",\"bar-label\":\"AssetSummaryGraph_bar-label__u6do8\"};","module.exports = __webpack_public_path__ + \"static/media/icon_eye.cb441765.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon_lock.0e3ddf7c.svg\";","module.exports = __webpack_public_path__ + \"static/media/fraudbuster_logo.26170150.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon_category.48316ef4.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid_system\":\"Login_grid_system__2Ljsd\",\"container\":\"Login_container__3bijV\",\"content\":\"Login_content__hv72i\",\"adornRight\":\"Login_adornRight__4efhH\",\"adornLeft\":\"Login_adornLeft__3YCIc\",\"title\":\"Login_title__VmW9Q\",\"sub_title\":\"Login_sub_title__48X2Q\",\"label\":\"Login_label__2Ssdy\",\"actions\":\"Login_actions__n--1Z\",\"link\":\"Login_link__tZCCP\",\"button\":\"Login_button__2xB0K\",\"link_signup\":\"Login_link_signup__2pIY8\",\"error\":\"Login_error__2ylNC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Home_container__EPs3I\",\"content\":\"Home_content__1-Kmv\",\"btn_next\":\"Home_btn_next__1M-IM\",\"box_section\":\"Home_box_section__exnCR\",\"grid_width_full\":\"Home_grid_width_full__2YvBf\",\"query_actions\":\"Home_query_actions__1xHzK\",\"input_upload_file\":\"Home_input_upload_file__3w7iY\",\"btn_upload_file\":\"Home_btn_upload_file__3JBQL\",\"label_upload_file\":\"Home_label_upload_file__2sTON\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ResultsComponent_container__3hF62\",\"box_section\":\"ResultsComponent_box_section__75OvQ\",\"grid_width_full\":\"ResultsComponent_grid_width_full__1j16X\",\"query_actions\":\"ResultsComponent_query_actions__yB8_I\",\"input_upload_file\":\"ResultsComponent_input_upload_file__2jztH\",\"btn_upload_file\":\"ResultsComponent_btn_upload_file__1xJTI\",\"label_upload_file\":\"ResultsComponent_label_upload_file__1oAkO\",\"responsive_columns\":\"ResultsComponent_responsive_columns__3bmuW\",\"box\":\"ResultsComponent_box__3FxY-\",\"btn_stats\":\"ResultsComponent_btn_stats__1ekco\",\"heading\":\"ResultsComponent_heading__2PtoN\"};","// use typescript enum rather than action constants\nexport enum AuthTypes {\n    ADD = \"ADD\",\n    DELETE = \"DELETE\",\n    LOGIN = 'auth:login',\n    LOGOUT = 'auth:logout',\n}\n","import React from 'react';\nimport {Switch, Route} from \"react-router-dom\";\n\nimport {\n    HomePage,\n    ResultsPage,\n    StatsPage,\n} from './../../pages';\n\ninterface EntryPageRouteProps {\n    readonly url?: boolean;\n    readonly saveData?: any;\n    readonly saveResult?: any;\n    readonly data:any;\n    readonly result:any;\n}\n\nconst EntryPageRoute: React.FC<EntryPageRouteProps> = (props) => {\n    const {\n        url = '/dashboard',\n        saveData,\n        saveResult,\n        data,\n        result,\n    } = props\n\n    return (\n        <Switch>\n            <Route\n                path={`${url}/results`}\n                exact\n                render={routeProps => (\n                    <ResultsPage \n                        {...routeProps}\n                        saveResult={saveResult}\n                        saveData={saveData} \n                    />\n                )}\n            />\n            <Route\n                exact\n                path={`${url}/results/stats`}\n                render={routeProps => (\n                    <StatsPage \n                        {...routeProps}\n                        data={data}\n                        result={result} \n                    />\n                )}\n            />\n            <Route\n                path={`${url}`}\n                exact\n                render={routeProps => (\n                    <HomePage \n                        {...routeProps}\n                        // data={data}\n                        // saveData={saveData} \n                    />\n                )}\n            />\n        </Switch>\n    );\n}\n\nexport default EntryPageRoute","import {action} from \"typesafe-actions\"\nimport {AuthTypes} from './AuthTypes'\n\nexport interface ILoginInfo {\n    access_token: string\n    expires_in: number\n    token_type: string\n    username: string\n    firstName: string\n    lastName: string\n    email: string\n    is_candidate: boolean\n    is_admin: boolean\n    is_technicien: boolean\n    is_publique: boolean\n}\n\nexport const authActions = {\n    login: (loginInfo: ILoginInfo) => action(AuthTypes.LOGIN, loginInfo),\n    logout: () => action(AuthTypes.LOGOUT, {})\n};","// use typescript enum rather than action constants\nexport enum NotificationTypes {\n    NEW = \"notification:new\",\n}","import {action} from \"typesafe-actions\"\nimport {NotificationTypes} from './NotificationTypes'\nimport {SnackbarOrigin} from \"@material-ui/core/Snackbar\";\n\nexport interface INotification {\n    id: number\n    text: string\n    variant: 'warning' | 'success' | 'error'\n    origin?: SnackbarOrigin\n}\n\nexport const notificationActions = {\n    newNotification: (notifInfo: INotification) => action(NotificationTypes.NEW, notifInfo),\n};\n","// use typescript enum rather than action constants\nexport enum SourcesTypes {\n    NEW_SOURCES = \"sources:new\",\n    SELECTED_SOURCES = \"sources:selected\",\n}","import {action} from \"typesafe-actions\"\nimport {SourcesTypes} from './SourcesTypes'\n\nexport interface INewSources {\n    topic: string\n    title: string\n    desc: string\n}\n\nexport const newSourcesAction = {\n    newSources: (sources: INewSources[]) => action(SourcesTypes.NEW_SOURCES, sources),\n};\n","export const key = `AIzaSyBGFQFk2CnNJwX8W-xosh5QJRduE3id4l0`;\n/*Urls for the application */\n// export const prefixer = 'http://10.42.0.5:5600/api/v1/';\n// export const prefixer = \"http://192.168.137.57:5020/api/\";\nexport const prefixer = \"http://192.168.100.27:5020/api/\";\n// export const prefixer = \"http://10.42.0.65:5002/api/\";\n//export const prefixer = \"http://10.42.0.219:5000/api/v1/\";\nexport const google_map_api_key = (address) => {\n    return `https://maps.googleapis.com/maps/api/geocode/json?address=${address}&key=${key}`;\n}\n\nexport const socketioUrl = 'wss://socketspreprod.clickid.gcloud.bara.ca/';\n//export const apiKey = \"pk_test_1PiZIwYz4GtUSMn2Df6E9GK1\";\nexport const apiKey = 'pk_test_BaNrkk8vtW8ASINxjqkChRQD';\n//export const apiKey = \"pk_live_nUTrZubKZrBNO38VQmbm3UxP\";\n\nexport const authUrls = {\n    //Auth URI\n    SIGNINUSER: `${prefixer}`,\n    LOGINUSER: `${prefixer}authentication/login`,\n    LOGOUTUSER: `${prefixer}authentication/logout`,\n    RESET_PASSWORD: `${prefixer}authentication/reset-password`,\n    SIGNUP: `${prefixer}authentication/signup`,\n};\n\n//export const hostIp = '192.168.1.102';\nexport const hostIp = 'localhost';\nexport const hostPort = 9002;\n","import * as React from 'react';\nimport {EntryPageRoute} from 'Routes';\nimport {connect} from \"react-redux\"\nimport * as MyTypes from \"MyTypes\";\nimport {Dispatch} from \"redux\";\nimport {\n    INewSources,\n    INotification,\n    SourcesTypes,\n    newSourcesAction,\n    NotificationTypes,\n} from \"actions\";\nimport {RouteComponentProps} from \"react-router\"\nimport {hostIp, hostPort} from \"../../services/urls\";\n\ndeclare var Paho: any;\n\nexport interface EntryPageProps {\n    readonly sources?: INewSources[];\n    readonly newNotification: (info: INotification) => void;\n    readonly newSources: (info: INewSources[]) => void;\n\n}\n\ninterface EntryPageState {\n    readonly signed_in: boolean;\n    readonly result?: any;\n    readonly data?: any;\n}\n\nclass EntryPageComponent extends React.Component<EntryPageProps & RouteComponentProps, EntryPageState> {\n    readonly state: EntryPageState = {\n        signed_in: false,\n        data:{}\n    };\n\n    onMount = () => {\n        let client = new Paho.MQTT.Client(hostIp, Number(hostPort), \"clientId7955\");\n        let {\n            newNotification,\n            newSources,\n        } = this.props\n        // set callback handlers\n        client.onConnectionLost = onConnectionLost;\n        client.onMessageArrived = onMessageArrived;\n\n        // connect the dataTopicClient\n        client.connect({onSuccess: onConnect});\n\n\n        // called when the dataTopicClient connects\n        function onConnect() {\n            // Once a connection has been made, make a subscription and send a message.\n            console.log(\"onConnect\");\n            client.subscribe(\"config\");\n            // let message = new Paho.MQTT.Message(\"Hello\");\n            // message.destinationName = \"S1\";\n            // dataTopicClient.send(message);\n        }\n\n        // called when the dataTopicClient loses its connection\n        function onConnectionLost(responseObject) {\n            if (responseObject.errorCode !== 0) {\n                newNotification({\n                    id: new Date().getTime(),\n                    text: 'Disconnected',\n                    variant: 'error'\n                })\n                console.log(\"onConnectionLost:\" + responseObject.errorMessage);\n            }\n        }\n\n        // called when a message arrives\n        function onMessageArrived(message) {\n            newNotification({\n                id: new Date().getTime(),\n                text: 'Sources received',\n                variant: 'success'\n            })\n            let sourcesSplits = `${message.payloadString}`.split('#?')\n            let sources = sourcesSplits.map(source => {\n                let sourceElements = source.split('wwww')\n                let [topic, title, desc] = sourceElements\n                return {\n                    topic, title, desc\n                }\n            });\n            newSources(sources)\n        }\n    }\n\n    saveData = data => this.setState({data})\n    saveResult = result => this.setState({result})\n\n\n    componentDidMount() {\n        this.onMount();\n    }\n\n    render() {\n        const {\n            sources\n        } = this.props\n\n        return (\n            <EntryPageRoute \n                saveData={this.saveData}\n                saveResult={this.saveResult}\n                data={this.state.data}\n                result={this.state.result}\n            />\n        );\n    }\n}\n\nconst MapStateToProps = (store: MyTypes.ReducerState) => {\n    return {\n        sources: store.sources\n    }\n}\n\nconst MapDispatchToProps = (dispatch: Dispatch<MyTypes.RootAction>) => ({\n    newNotification: (notification: INotification) => dispatch({type: NotificationTypes.NEW, payload: notification}),\n    newSources: (sources: INewSources[]) => dispatch({type: SourcesTypes.NEW_SOURCES, payload: sources}),\n})\n\nconst EntryPage = connect(\n    MapStateToProps,\n    MapDispatchToProps\n)(EntryPageComponent)\n\nexport {\n    EntryPage,\n}\n","import * as React from 'react';\nimport styles from './RoundedIndicatorTab.module.scss'\n\nexport interface RoundedIndicatorTabProps {\n  readonly dumm?: boolean;\n}\n\ninterface RoundedIndicatorTabState {\n  readonly dumm:boolean;\n}\n\nexport class RoundedIndicatorTab extends React.Component<RoundedIndicatorTabProps, RoundedIndicatorTabState> {\n  readonly state: RoundedIndicatorTabState = { dumm: false };\n\n\n  render() {\n    return (\n      <div >\n        hello world\n      </div>\n    );\n  }\n}\n","import * as React from 'react';\n\nexport interface BaseProps {\n  readonly dumm?: boolean;\n}\n\ninterface BaseState {\n  readonly dumm:boolean;\n}\n\nexport class Base extends React.Component<BaseProps, BaseState> {\n  readonly state: BaseState = { dumm: false };\n\n\n  render() {\n    return (\n      <div >\n        Base component\n      </div>\n    );\n  }\n}\n","import styles from './NotificationWrapper.module.scss'\nimport React, {SyntheticEvent, useEffect} from 'react';\nimport Button from '@material-ui/core/Button';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport {\n    NotificationTypes,\n    notificationActions,\n    INotification,\n} from 'actions'\nimport * as MyTypes from \"MyTypes\";\nimport {Dispatch} from \"redux\";\nimport {connect} from 'react-redux'\nimport classNames from \"classnames\";\nimport {SnackbarContent} from \"@material-ui/core\";\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport InfoIcon from '@material-ui/icons/Info';\nimport CloseIcon from '@material-ui/icons/Close';\nimport WarningIcon from '@material-ui/icons/Warning';\n\nexport interface INotificationProps {\n    notification: INotification;\n}\n\nexport interface State {\n    open: boolean;\n    currentNotification?: INotification;\n}\n\nconst ConsecutiveSnackbars: React.FC<INotificationProps> = (props) => {\n    const {\n        notification,\n    } = props\n\n    const queueRef = React.useRef<INotification[]>([]);\n    const [open, setOpen] = React.useState(false);\n    const [currentNotification, setCurrentNotification] = React.useState<INotification | undefined>(undefined);\n\n    const processQueue = () => {\n        if (queueRef.current.length > 0) {\n            setCurrentNotification(queueRef.current.shift());\n            setOpen(true);\n        }\n    };\n\n    const handleClick = (notification: INotification) => {\n        queueRef.current.push(notification);\n        console.log({handlingClick: true})\n        if (open) {\n            // immediately begin dismissing current message\n            // to start showing new one\n            setOpen(false);\n        } else {\n            processQueue();\n        }\n    };\n\n    useEffect(() => {\n        if (notification.id !== 0 && !queueRef.current.map(u => u.id).includes(notification.id)) {\n            if (currentNotification === undefined) {\n                handleClick(notification)\n            } else if (currentNotification.id !== notification.id) {\n                handleClick(notification);\n            }\n        }\n    })\n\n    const handleClose = (event: SyntheticEvent | MouseEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setOpen(false);\n    };\n\n    const handleExited = () => {\n        processQueue();\n    };\n\n    return (\n        <Snackbar\n            key={currentNotification ? currentNotification.id : undefined}\n            anchorOrigin={{\n                vertical: currentNotification ? currentNotification.origin ? currentNotification.origin.vertical : 'bottom' : 'bottom',\n                horizontal: currentNotification ? currentNotification.origin ? currentNotification.origin.horizontal : 'left' : 'left',\n            }}\n            open={open}\n            autoHideDuration={6000}\n            onClose={handleClose}\n            onExited={handleExited}\n            ContentProps={{\n                'aria-describedby': 'message-id',\n            }}\n        >\n            <MySnackbarContentWrapper\n                onClose={handleClose}\n                className={styles.snackbar}\n                variant={currentNotification ? currentNotification.variant : 'success'}\n                message={currentNotification ? currentNotification.text : ''}\n            />\n        </Snackbar>\n    );\n}\n\n\nconst MapStateToProps = (store: MyTypes.ReducerState) => ({\n    notification: store.notification\n})\n\nconst MapDispatchToProps = (dispatch: Dispatch<MyTypes.RootAction>) => ({\n    newNotification: (notification: INotification) => dispatch({type: NotificationTypes.NEW, payload: notification}),\n})\n\nexport default connect(\n    MapStateToProps,\n    MapDispatchToProps\n)(ConsecutiveSnackbars)\n\n\nexport interface Props {\n    className?: string;\n    message?: string;\n    onClose?: (event: SyntheticEvent | MouseEvent, reason?: string) => void;\n    variant: keyof typeof variantIcon;\n}\n\nconst variantIcon = {\n    success: CheckCircleIcon,\n    warning: WarningIcon,\n    error: ErrorIcon,\n    info: InfoIcon,\n};\n\nfunction MySnackbarContentWrapper(props: Props) {\n    const {className, message, onClose, variant, ...other} = props;\n    const Icon = variantIcon[variant];\n\n    return (\n        <SnackbarContent\n            className={classNames(`snackbar_${variant}`, className)}\n            aria-describedby=\"client-snackbar\"\n            message={\n                <span id=\"client-snackbar\" className={styles.message}>\n                    <Icon className={classNames(styles.icon, styles.iconVariant)}/>\n                    <span>{message}</span>\n                </span>\n            }\n            action={[\n                <IconButton key=\"close\" aria-label=\"close\" color=\"inherit\" onClick={onClose}>\n                    <CloseIcon className={styles.icon}/>\n                </IconButton>,\n            ]}\n            {...other}\n        />\n    );\n}","import * as React from 'react';\nimport styles from './BorderlessTextField.module.scss'\nimport Textfield, {TextFieldProps} from '@material-ui/core/TextField'\nimport classNames from 'classnames'\n\n/**\n * This component respects the same api as the default material ui textfield component.\n * have a look at UserListPage.tsx file on the last commit of this branch feature_textfield_custom_component\n * to have an idea how it's used.\n */\n\n interface BorderlessTextFieldProps {\n     readonly otherClasses?:{\n         container?:string,\n         label?:string,\n        //  ...TextFieldProps.classes,\n     }\n }\n\n\nexport const BorderlessTextField: React.FC<BorderlessTextFieldProps & TextFieldProps> = (props) => {\n\n    const {\n        otherClasses= {\n            container : '',\n            label : '',\n        },\n        classes: {\n            root: classes_root,\n            ...restClasses\n        } = {\n            root: '',\n            dummy: '',\n        },\n        variant,\n        label,\n        InputProps = {\n            classes: {\n                input: '',\n                root: '',\n            }\n        },\n        select,\n        children,\n        ...rest\n    } = props\n\n    let label_definite = label;\n    if (select === false) {\n        label_definite = ''\n    }\n    const renderTextField = () =>(\n        <Textfield\n            {...rest}\n            classes={{\n                root: classNames(\n                    styles.container,\n                    classes_root,\n                ),\n                ...restClasses\n            }}\n            variant={'outlined'}\n            InputProps={{\n                ...InputProps,\n                classes: {\n                    input: styles.textfield_input,\n                    root: styles.textfield_root,\n                },\n            }}\n            select={Boolean(select)}\n        >\n            {children}\n        </Textfield>\n    );\n\n    return (\n        <>\n        {label ? (\n            <div\n                className={classNames(\n                    styles.container,\n                    otherClasses.container,\n                )}\n            >\n                <span\n                className={\n                    classNames(\n                        styles.label,\n                        otherClasses.label,\n                    )\n                }\n                >{label}</span>\n                {renderTextField()}\n            </div>\n        ) : (\n            <>\n            {renderTextField()}\n            </>\n        )}\n        </>\n    )\n}\n","import React, { Component } from 'react';\nimport { Element } from 'react-faux-dom';\nimport * as d3 from 'd3';\nimport styles from \"./AssetSummaryGraph.module.scss\"\n\n// const data = [\n//     {\n//         stream_name: 'S1',\n//         value: 273\n//     },\n//     {\n//         stream_name: 'S2',\n//         value: 2420\n//     },\n//     {\n//         stream_name: 'S3',\n//         value: 1270\n//     },\n//     {\n//         stream_name: 'S4',\n//         value: 553\n//     },\n// ];\n\nlet data = []\n\nconst margin = {\n    top: 60,\n    bottom: 100,\n    left: 80,\n    right: 40\n};\n\nclass AssetSummaryGraph extends Component {\n    state = {\n        mounted: false,\n        shouldRerender: true,\n    }\n\n    componentDidMount() {\n        const element = document.getElementById('chart_container');\n        const width = element.offsetWidth;\n        const height = element.offsetHeight;\n        // this.setState({ width, height })\n        this.setState({ mounted: true })\n        this.drawChart(width, height, element)\n    }\n\n    componentWillUnmount() {\n        this.setState({ shouldRerender: true })\n    }\n\n    // shouldComponentUpdate(props) { return this.state.shouldRerender }\n\n    drawChart(width, height, element) {\n        this.setState({ chart: \"<span>Loading</span>\" })\n        const sources = this.props.data.filter(datum => `${datum}`.indexOf('T_') === 0)\n        const parsedSources = sources.reduce((acc, curr) => {\n            const sourceName = curr.split(' ')[0]\n            let count = acc[sourceName] || 0\n            acc[sourceName] = ++count\n            return acc\n        }, {})\n\n        Object.keys(parsedSources).forEach(key => {\n            data.push({\n                stream_name: key,\n                value: parsedSources[key]\n            })\n        });\n        // console.log({data, parsedSources, sources})\n\n\n        console.log({ width, height })\n\n        const el = new Element('div');\n\n        const svg = d3.select(el)\n\n            .append('svg')\n            .attr('id', 'chart')\n            .attr('width', width)\n            .attr('height', height);\n        svg.selectAll(\".bar-label\").remove();\n\n\n        const chart = svg.append('g')\n            .classed('display', true)\n            .attr('transform', `translate(${margin.left},${margin.top})`);\n\n        const chartWidth = width - margin.left - margin.right;\n        const chartHeight = height - margin.top - margin.bottom\n        this.plot(chart, chartWidth, chartHeight);\n\n        this.setState({ shouldRerender: false })\n        this.setState({ chart: el.toReact() });\n        return\n    }\n\n    plot = (chart, width, height) => {\n        const xScale = d3.scaleBand()\n            .domain(data.map(d => d.stream_name))\n            .range([0, width]);\n        const yScale = d3.scaleLinear()\n            .domain([0, d3.max(data, d => d.value)])\n            .range([height, 0]);\n        const colorScale = d3.scaleOrdinal(d3.schemeCategory10);\n\n        chart.selectAll(\".bar\")\n            .data(data)\n            .enter()\n            .append('rect')\n            .classed('bar', true)\n            .attr('x', d => xScale(d.stream_name))\n            .attr('y', d => yScale(d.value))\n            .attr('height', d => (height - yScale(d.value)))\n            .attr('width', d => xScale.bandwidth())\n            .style('fill', (d, i) => colorScale(i));\n\n        chart.selectAll('.bar-label')\n            .data(data)\n            .enter()\n            .append('text')\n            .classed('bar-label', true)\n            .attr('x', d => xScale(d.stream_name) + xScale.bandwidth() / 2)\n            .attr('dx', 0)\n            .attr('y', d => yScale(d.value))\n            .attr('dy', -6)\n            .text(d => d.value);\n\n        const yGridlines = d3.axisLeft()\n            .scale(yScale)\n            .ticks(5)\n            .tickSize(-width, 0, 0)\n            .tickFormat('-')\n\n        chart.append('g')\n            .call(yGridlines)\n            .classed('gridline', true);\n\n        const xAxis = d3.axisBottom()\n            .scale(xScale);\n\n\n        chart.append('g')\n            .classed('x axis', true)\n            .attr('transform', `translate(0,${height})`)\n            .call(xAxis);\n\n        chart.select('.y.axis')\n            .append('text')\n            .attr('x', 10)\n            .attr('y', yScale(d3.max(data, d => d.value)))\n            // .attr('transform', `translate(-50, ${height / 3}), rotate(-90)`)\n            .attr('fill', '#000')\n            .style('font-size', '20px')\n            .style('text-anchor', 'middle')\n            .text('Number of events per stream');\n\n        chart.append(\"text\")\n            .attr(\"id\", \"a\")\n            .attr('x', 60)\n            .attr('y', -20)\n            .attr('fill', '#000')\n            .style('font-size', '20px')\n            .style('text-anchor', 'middle')\n            .text('Number of events per stream');\n        chart.append(\"text\")\n            .attr(\"id\", \"a\")\n            .attr('x', width - 70)\n            .attr('y', height + 40)\n            .attr('fill', '#000')\n            .style('font-size', '20px')\n            .style('text-anchor', 'middle')\n            .text('Streams');\n    }\n\n    render() {\n        const {\n            width, height,\n            mounted,\n            chart,\n        } = this.state\n        console.log({ chart })\n        return (\n            <div id='chart_container' className={styles.container}>\n                {mounted && chart}\n            </div>\n        )\n    }\n}\n\nexport default AssetSummaryGraph;\n","import React, {useEffect,} from 'react'\nimport {RouteComponentProps, withRouter} from \"react-router\"\nimport {Base, BorderlessTextField} from 'components'\nimport styles from './Home.module.scss'\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Typography from \"@material-ui/core/Typography/Typography\";\nimport RadioButtonChecked from '@material-ui/icons/RadioButtonChecked';\nimport RadioButtonUnchecked from '@material-ui/icons/RadioButtonUnchecked';\nimport {Button, CircularProgress, IconButton} from \"@material-ui/core\";\nimport {CloudUploadRounded, KeyboardArrowRight, PauseRounded, PlayArrowRounded, StopRounded} from \"@material-ui/icons\";\nimport * as MyTypes from \"MyTypes\";\nimport {Dispatch} from \"redux\";\nimport {INewSources, INotification, NotificationTypes, SourcesTypes} from \"../../actions\";\nimport {connect} from 'react-redux'\nimport classNames from 'classnames'\nimport {hostIp, hostPort} from \"../../services/urls\";\ndeclare var Paho: any;\n\nexport interface HomePageProps {\n    readonly sources?: INewSources[];\n    readonly newNotification: (info: INotification) => void;\n    readonly newSources: (info: INewSources[]) => void;\n}\n\ninterface HomePageState {\n    readonly signed_in: boolean\n}\n\nlet sourceTopic = 'source_topic';\n\nconst HomePageComponent: React.FC<HomePageProps & RouteComponentProps> = (props) => {\n    const [selectedSources, setSelectedSources] = React.useState<string[]>([]);\n    const [query, setQuery] = React.useState<string>('');\n    const [client, setclient] = React.useState<any>(new Paho.MQTT.Client(hostIp, Number(hostPort), \"clientId2\"));\n\n    const setup = () => {\n        let {\n            newNotification,\n            // newSources,\n        } = props\n\n        // called when the dataTopicClient connects\n        const onConnect = () => {\n            // Once a connection has been made, make a subscription and send a message.\n            // dataTopicClient.subscribe(dataTopic)\n        }\n\n        // called when the this.dataTopicClient loses its connection\n        const onConnectionLost = (responseObject) => {\n            if (responseObject.errorCode !== 0) {\n                newNotification({\n                    id: new Date().getTime(),\n                    text: 'Lost connection while in homepage' + responseObject.errorMessage,\n                    variant: 'error'\n                })\n            }\n        }\n\n        // called when a message arrives\n        const onMessageArrived = (message) => {\n        }\n\n        // set callback handlers\n        client.onConnectionLost = onConnectionLost;\n        client.onMessageArrived = onMessageArrived;\n\n        // connect the this.dataTopicClient\n        client.connect({onSuccess: onConnect});\n\n\n    }\n\n    useEffect(setup, [])\n\n    const handleChange = (panel: string) => (event: React.ChangeEvent<{}>, isExpanded: boolean) => {\n        if (selectedSources.includes(panel)) {\n            setSelectedSources(selectedSources.filter(panelItem => panelItem !== panel))\n        } else {\n            setSelectedSources([...selectedSources, panel])\n        }\n    };\n\n    const handleNext = (i: any) => {\n        const {\n            newNotification\n        } = props\n\n        if (selectedSources.length < 1) {\n            newNotification({\n                id: new Date().getTime(),\n                text: 'Please, select a source',\n                variant: 'warning'\n            })\n            // return;\n        } else if (query === '') {\n            newNotification({\n                id: new Date().getTime(),\n                text: 'Please, enter a valid query',\n                variant: 'warning'\n            })\n            return;\n        } else {}{\n            let messageString = `${selectedSources.join('wwww')}wwww${query}`\n            let message = new Paho.MQTT.Message(messageString);\n            message.destinationName = sourceTopic\n            client.send(message);\n            const {\n                history\n            } = props\n            history.push('/dashboard/results')\n        }\n    }\n\n    /**\n     * resolution to this method gotten from\n     * https://javascript.info/file\n     */\n    const onFileDroped = filesData => {\n        // @ts-ignore\n        var fileToLoad = document.getElementById(\"input_file\").files[0];\n\n        var fileReader = new FileReader();\n        fileReader.onload = function (fileLoadedEvent) {\n            // @ts-ignore\n            var textFromFileLoaded = fileLoadedEvent.target.result;\n            // @ts-ignore\n            setQuery(textFromFileLoaded)\n        };\n\n        fileReader.readAsText(fileToLoad, \"UTF-8\");\n    }\n\n    const {\n        sources,\n    } = props\n    // console.log({sources})\n    return (\n        <div className={styles.container}>\n            <Typography className={styles.heading} variant={'h2'}>\n                Please provide a query and select the various sources\n            </Typography>\n            <div className={styles.content}>\n\n                <div\n                    className={classNames(\n                        styles.box_section,\n                        styles.grid_width_full,\n                    )}\n                >\n                    <span>Inset your query below or select a txt file containing the query</span>\n                    <BorderlessTextField\n                        multiline={true}\n                        // label={`Inset your query below or select a txt file containing the query`}\n                        rows={5}\n                        onChange={e => setQuery(e.target.value)}\n                        value={query}\n                        rowsMax={8}\n                        fullWidth={true}\n                        classes={{root: styles.grid_width_full}}\n                    />\n                </div>\n                <div\n                    className={classNames(\n                        styles.box_section,\n                        styles.query_actions,\n                    )}\n                >\n                    {/*\n                <IconButton onClick={handleAction('play')}>\n                    <PlayArrowRounded/>\n                </IconButton>\n                <IconButton onClick={handleAction('pause')}>\n                    <PauseRounded/>\n                </IconButton>\n                <IconButton onClick={handleAction('stop')}>\n                    <StopRounded/>\n                </IconButton>\n*/}\n                    <span></span>\n                    <span></span>\n                    <span></span>\n                    <span></span>\n\n                    <input\n                        accept=\".txt\"\n                        className={styles.input_upload_file}\n                        id={'input_file'}\n                        multiple\n                        type=\"file\"\n                        onChange={onFileDroped}\n                    />\n                    <label htmlFor={'input_file'} className={styles.label_upload_file}>\n                        <Button component='span'>Select a file <CloudUploadRounded/> </Button>\n                    </label>\n                </div>\n\n                {sources && sources.length > 0 && sources.map(source => (\n                    <ExpansionPanel expanded={selectedSources.includes(source.topic)}\n                                    onChange={handleChange(source.topic)}>\n                        <ExpansionPanelSummary\n                            expandIcon={selectedSources.includes(source.topic) ? <RadioButtonChecked/> :\n                                <RadioButtonUnchecked/>}\n                            aria-controls=\"panel1a-content\"\n                            id=\"panel1a-header\"\n                        >\n                            <Typography className={styles.panel_heading}>{source.title}</Typography>\n                        </ExpansionPanelSummary>\n                        <ExpansionPanelDetails>\n                            <Typography align={\"left\"}>\n                                {source.desc}\n                            </Typography>\n                        </ExpansionPanelDetails>\n                    </ExpansionPanel>\n                ))}\n                {!sources || sources.length < 1 && (\n                    <CircularProgress size={30}/>\n                )}\n                <Button\n                    classes={{root: styles.btn_next}}\n                    onClick={handleNext}\n                    variant={'contained'}\n                >NEXT <KeyboardArrowRight/>\n                </Button>\n            </div>\n        </div>\n    )\n}\n\nconst MapStateToProps = (store: MyTypes.ReducerState) => {\n    return {\n        sources: store.sources\n    }\n}\n\nconst MapDispatchToProps = (dispatch: Dispatch<MyTypes.RootAction>) => ({\n    newNotification: (notification: INotification) => dispatch({type: NotificationTypes.NEW, payload: notification}),\n    newSources: (sources: INewSources[]) => dispatch({type: SourcesTypes.NEW_SOURCES, payload: sources}),\n})\n\nconst HomePage = connect(\n    MapStateToProps,\n    MapDispatchToProps\n)(HomePageComponent)\n\nexport {\n    HomePage\n}","import isoFetch from \"isomorphic-fetch\";\n//require(\"es6-promise\").polyfill();\n// require('isomorphic-fetch');\nclass BaseService {\n    static getHeaders = (isFile?: boolean) => {\n        let headers = new Headers();\n        if (!isFile) {\n            headers.append(\"Content-Type\", \"application/json\");\n        }\n        headers.append(\"Accept\", \"application/json\");\n        headers.append(\"Access-Control-Allow-Origin\", \"*\");\n        headers.append(\"Origin\", \"*\");\n        headers.append(\"Credentials\", \"same-origin\");\n        //headers.append(\"Access-Control-Request-Headers\", \"X-Custom-Header\");\n        let lang = localStorage.getItem(\"lang\")\n            ? (localStorage.getItem(\"lang\") || '').toString()\n            : \"fr\";\n        headers.append(\"lang\", lang);\n        return headers;\n    };\n\n    static getHeadersAuth = (isFile?: boolean) => {\n        let headers = BaseService.getHeaders(isFile);\n        let access_token = localStorage.getItem(\"access_token\")\n            ? (localStorage.getItem(\"access_token\") || '').toString()\n            : '';\n        if (access_token === '') {\n            console.log('reloading here')\n            window.location.reload();\n        }\n        headers.append(\"x-access-token\", access_token);\n        return headers;\n    };\n\n    static checkStatus = response => {\n        if (response.status >= 200 && response.status < 300) {\n            return response;\n        } else {\n            var error = new Error(response.statusText);\n            error['response'] = response;\n            throw error;\n        }\n    };\n\n    static getToken = () => {\n        return (localStorage.getItem(\"access_token\") || '').toString();\n    };\n\n    static postRequest = async (url, body, required_auth) => {\n        let head = required_auth\n            ? BaseService.getHeadersAuth()\n            : BaseService.getHeaders();\n\n        let headers = {\n            method: \"POST\",\n            headers: head,\n            mode: \"cors\",\n            cache: \"default\",\n            body: JSON.stringify(body)\n        };\n\n        console.log({ headers: headers.body })\n\n        let response = await isoFetch(url, headers)\n            .then(response => {\n                return response;\n            })\n            .catch(err => {\n                return err;\n            });\n        return response;\n    };\n\n    static postFileRequest = async (url, body, required_auth) => {\n        let head = required_auth\n            ? BaseService.getHeadersAuth(true)\n            : BaseService.getHeaders(true);\n\n        let headers = {\n            method: \"POST\",\n            headers: head,\n            mode: \"cors\",\n            cache: \"default\",\n            body: body\n        };\n        let response = await isoFetch(url, headers)\n            .then(response => {\n                /**console.log(response);**/\n                return response;\n            })\n            .catch(err => {\n                return err;\n            });\n        return response;\n    };\n\n    static putRequest = async (url, body, required_auth) => {\n        let head = required_auth\n            ? BaseService.getHeadersAuth()\n            : BaseService.getHeaders();\n\n        let headers = {\n            method: \"PUT\",\n            headers: head,\n            mode: \"cors\",\n            cache: \"default\",\n            body: JSON.stringify(body)\n        };\n        let response = await isoFetch(url, headers)\n            .then(response => {\n                return response;\n            })\n            .catch(err => {\n                return err;\n            });\n        return response;\n    };\n\n\n    static patchRequest = async (url, body, required_auth) => {\n        let head = required_auth\n            ? BaseService.getHeadersAuth()\n            : BaseService.getHeaders();\n\n        let headers = {\n            method: \"PATCH\",\n            headers: head,\n            mode: \"cors\",\n            cache: \"default\",\n            body: JSON.stringify(body)\n        };\n        let response = await isoFetch(url, headers)\n            .then(response => {\n                return response;\n            })\n            .catch(err => {\n                return err;\n            });\n        return response;\n    };\n\n\n    static deleteRequest = async (url, body, required_auth) => {\n        let head = required_auth\n            ? BaseService.getHeadersAuth()\n            : BaseService.getHeaders();\n\n        let headers = {\n            method: \"DELETE\",\n            headers: head,\n            mode: \"cors\",\n            cache: \"default\",\n            body: JSON.stringify(body)\n        };\n        let response = await isoFetch(url, headers)\n            .then(response => {\n                return response;\n            })\n            .catch(err => {\n                return err;\n            });\n        return response;\n    };\n\n    static getRequest = async (url, required_auth) => {\n        let head = required_auth\n            ? BaseService.getHeadersAuth()\n            : BaseService.getHeaders();\n\n        let headers = {\n            method: \"GET\",\n            headers: head,\n            mode: \"cors\",\n            cache: \"default\"\n        };\n        let response = await isoFetch(url, headers)\n            .then(response => {\n                return response;\n            })\n            .catch(err => {\n                return err;\n            });\n        return response;\n    };\n}\n\nexport default BaseService;\n","import BaseService from './BaseService'\nimport {authUrls} from './urls'\nimport {ILoginFormValues} from \"../pages/auth/login/Login.page\";\n\ninterface LoginParams {\n    email: string,\n    password: string,\n}\n\ninterface SignUpParams {\n    email: string,\n    password: string,\n}\n\nclass AuthService {\n    static login = (info: ILoginFormValues) => BaseService.postRequest(authUrls.LOGINUSER, info, false);\n    static signUp = (info: SignUpParams) => BaseService.postRequest(authUrls.SIGNUP, info, false);\n}\n\nexport default AuthService;","import * as React from 'react';\nimport {connect} from \"react-redux\"\nimport {Dispatch} from \"redux\"\nimport * as MyTypes from \"MyTypes\"\nimport {Link, RouteComponentProps} from \"react-router-dom\"\nimport {\n    ILoginInfo,\n    AuthTypes,\n    NotificationTypes,\n    INotification,\n} from 'actions'\nimport {\n    AuthService,\n} from 'services'\nimport {\n    BorderlessTextField,\n} from \"components\"\nimport {Formik, FormikActions, FormikProps, Form, Field, FieldProps} from 'formik';\nimport {CircularProgress} from \"@material-ui/core\";\nimport * as Yup from 'yup'\nimport styles from './Login.module.scss'\nimport IconEye from 'assets/imgs/icon_eye.svg'\nimport IconMessage from 'assets/imgs/icon_message.svg'\nimport IconLock from 'assets/imgs/icon_lock.svg'\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport classes from 'classnames'\n\nexport interface ILoginFormValues {\n    email: string;\n    password: string;\n}\n\nexport interface LoginProps extends RouteComponentProps {\n    readonly sign_in?: boolean;\n    readonly saveLoginToAppState: (info: ILoginInfo) => void;\n    readonly newNotification: (info: INotification) => void;\n}\n\ninterface LoginState {\n    readonly sign_in: boolean;\n    readonly show_password: boolean;\n}\n\nclass LoginPageComponent extends React.Component<LoginProps, LoginState> {\n    readonly state: LoginState = {\n        sign_in: false,\n        show_password: false,\n    };\n\n    login = (\n        values: ILoginFormValues,\n        setSubmitting: any,\n    ) => {\n        const {\n            saveLoginToAppState,\n            newNotification,\n            history,\n        } = this.props\n        AuthService.login(values)\n            .catch(error => {\n                setSubmitting(false)\n                newNotification({\n                    id: new Date().getTime(),\n                    text: 'Unknown error, please try later',\n                    variant: 'error'\n                })\n            })\n            .then(async response => {\n                setSubmitting(false)\n                const responseStatus = response.status\n                console.log({responseStatus})\n                if ([201, 200].includes(responseStatus)) {\n                    let responseData = await response.json() as ILoginInfo\n                    saveLoginToAppState(responseData)\n                    newNotification({\n                        id: new Date().getTime(),\n                        text: `Welcome mr/mrs ${responseData.firstName}`,\n                        variant: 'success'\n                    })\n                    history.push('/dashboard')\n                } else if ([404, 401, 500].includes(responseStatus)) {\n                    let {message} = await response.json();\n                    newNotification({\n                        id: new Date().getTime(),\n                        text: message,\n                        variant: 'error'\n                    })\n                } else {\n                    newNotification({\n                        id: new Date().getTime(),\n                        text: 'Unknown error, please try later',\n                        variant: 'error'\n                    })\n                }\n            })\n    }\n\n    fields = [\n        {\n            name: 'email',\n            icon: IconMessage,\n            type: 'email',\n            label: 'Username or Email address',\n            // InputProps:{\n            //     endAdornment: <InputAdornment position=\"end\">Kg</InputAdornment>,\n            //   }\n        },\n    ]\n\n\n    render() {\n        return (\n            <Formik\n                initialValues={{\n                    email: 'bara@bara.ca',\n                    password: 'bara2019',\n                }}\n                onSubmit={(\n                    values: ILoginFormValues,\n                    actions: FormikActions<ILoginFormValues>\n                ) => {\n                    this.login(values, actions.setSubmitting)\n                    console.log({logging: 'logging'})\n                }}\n                validationSchema={Yup.object().shape({\n                    email: Yup.string()\n                        .email(\"Email not valid\")\n                        .required(\"Email is required\"),\n                    password: Yup.string().required(\"Password is required\")\n                })}\n                render={({\n                             values,\n                             handleBlur,\n                             handleChange,\n                             submitForm,\n                             handleSubmit,\n                             isSubmitting,\n                             setSubmitting,\n                             errors,\n                             touched,\n                         }: FormikProps<ILoginFormValues>) => (\n                    <div className={styles.container}>\n                        <div\n                            className={classes(\n                                styles.grid_system,\n                                styles.content\n                            )}\n                        >\n                            <span className={styles.title}>Login into account</span>\n                            <span className={styles.sub_title}>Use your username or email to access your account.</span>\n                            {this.fields.map(field => (\n                                <BorderlessTextField\n                                    label={errors[field.name] ?\n                                        <span className={styles.error}>{errors[field.name]}</span> : field.label}\n                                    name={field.name}\n                                    type={field.type}\n                                    value={values[field.name]}\n                                    error={Boolean(errors[field.name])}\n                                    onChange={e => {\n                                        handleChange(e)\n                                        handleBlur(e)\n                                    }}\n                                    InputProps={{\n                                        startAdornment: <InputAdornment position=\"start\">\n                                            <img\n                                                src={field.icon}\n                                                className={styles.adornLeft}\n                                            />\n                                        </InputAdornment>,\n                                        endAdornment: <InputAdornment\n                                            position=\"end\"\n                                            style={{cursor: 'pointer'}}\n                                        >\n                                        </InputAdornment>,\n                                    }}\n                                />\n                            ))}\n                            <BorderlessTextField\n                                otherClasses={{\n                                    label: styles.label\n                                }}\n                                label={errors.password ?\n                                    <span className={styles.error}>{errors.password}</span> : 'password'}\n                                name={'password'}\n                                type={this.state.show_password ? 'text' : 'password'}\n                                value={values['password']}\n                                error={touched.password && Boolean(errors.password)}\n                                onChange={e => {\n                                    handleChange(e)\n                                    handleBlur(e)\n                                }}\n                                InputProps={{\n                                    startAdornment: <InputAdornment\n                                        position=\"start\"\n                                    >\n                                        <img src={IconLock} className={styles.adornLeft}/>\n                                    </InputAdornment>,\n                                    endAdornment: <InputAdornment\n                                        position=\"end\"\n                                        onClick={e => this.setState({show_password: !this.state.show_password})}\n                                        style={{cursor: 'pointer'}}\n                                    >\n                                        <img src={IconEye} className={styles.adornRight}/>\n                                    </InputAdornment>,\n                                }}\n                            />\n\n                            <div className={styles.actions}>\n                                <Link to='/auth/recover' className={styles.link}> Forgot password?</Link>\n                                <button\n                                    //@ts-ignore\n                                    onClick={handleSubmit}\n                                    className={styles.button}\n                                >\n                                    Login {isSubmitting && (<CircularProgress size={15}/>)}\n                                </button>\n                            </div>\n                            <div className={styles.link}>\n                                Don't have an account? <Link to='/auth/recover' className={styles.link_signup}>Register\n                                here</Link>\n                            </div>\n\n                        </div>\n                    </div>\n                )}\n            />\n        );\n    }\n}\n\nconst MapStateToProps = (store: MyTypes.ReducerState) => {\n    return {\n        signed_in: store.auth.access_token !== '',\n    }\n}\n\nconst MapDispatchToProps = (dispatch: Dispatch<MyTypes.RootAction>) => ({\n    saveLoginToAppState: (loginInfo: ILoginInfo) => dispatch({type: AuthTypes.LOGIN, payload: loginInfo}),\n    newNotification: (notification: INotification) => dispatch({type: NotificationTypes.NEW, payload: notification}),\n})\n\nconst LoginPage = connect(\n    MapStateToProps,\n    MapDispatchToProps\n)(LoginPageComponent)\n\nexport {\n    LoginPage\n}","import * as React from 'react'\n// import {AuthPageRoute} from 'Routes'\nimport styles from './Auth.module.scss'\nimport Logo from 'assets/imgs/fraudbuster_logo.svg'\nimport classes from 'classnames'\n\n\nexport interface AuthProps {\n    readonly dumm?: boolean\n}\n\ninterface AuthState {\n    readonly dumm: boolean\n}\n\nclass AuthPageComponent extends React.Component<AuthProps, AuthState> {\n    readonly state: AuthState = {dumm: false}\n\n\n    render() {\n        return (\n            <>\n                <span className={styles.background}></span>\n                <div className={styles.container}>\n                    <div\n                        className={classes(\n                            styles.grid_system,\n                            styles.content,\n                        )}\n                    >\n                        <img src={Logo} className={styles.logo}/>\n                        {/*<AuthPageRoute/>*/}\n                    </div>\n                </div>\n            </>\n        )\n    }\n}\n\nexport {\n    AuthPageComponent as AuthPage\n}\n","import * as React from 'react';\nimport {connect} from \"react-redux\"\nimport {Dispatch} from \"redux\"\nimport * as MyTypes from \"MyTypes\"\nimport {Link, RouteComponentProps} from \"react-router-dom\"\nimport {\n    ILoginInfo,\n    AuthTypes,\n    NotificationTypes,\n    INotification,\n} from 'actions'\nimport {\n    AuthService,\n} from 'services'\nimport {\n    BorderlessTextField,\n} from \"components\"\nimport {Formik, FormikActions, FormikProps, Form, Field, FieldProps} from 'formik';\nimport {CircularProgress} from \"@material-ui/core\";\nimport * as Yup from 'yup'\nimport styles from './SignUp.module.scss'\nimport IconCategory from 'assets/imgs/icon_category.svg'\nimport IconEye from 'assets/imgs/icon_eye.svg'\nimport IconKey from 'assets/imgs/icon_key.svg'\nimport IconLeaf from 'assets/imgs/icon_leaf.svg'\nimport IconMessage from 'assets/imgs/icon_message.svg'\nimport IconPerson from 'assets/imgs/icon_person.svg'\nimport IconLock from 'assets/imgs/icon_lock.svg'\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport classes from 'classnames'\n\ninterface ISignUpFormValues {\n    email: string;\n    password: string;\n    firstname: string;\n    lastname: string;\n    username: string;\n    province: string;\n    ref_id: string;\n}\n\nexport interface SignUpProps extends RouteComponentProps {\n    readonly sign_in?: boolean;\n    readonly saveLoginToAppState: (info: ILoginInfo) => void;\n    readonly newNotification: (info: INotification) => void;\n}\n\ninterface SignUpState {\n    readonly sign_in: boolean;\n    readonly show_password: boolean;\n}\n\nclass SignUpPageComponent extends React.Component<SignUpProps, SignUpState> {\n    readonly state: SignUpState = {\n        sign_in: false,\n        show_password: false,\n    };\n\n    login = (\n        values: ISignUpFormValues | any,\n        setSubmitting: any,\n    ) => {\n        const {\n            saveLoginToAppState,\n            newNotification,\n            history,\n        } = this.props\n        AuthService.login(values)\n            .then(async response => {\n                setSubmitting(false)\n                const responseStatus = response.status\n                console.log({responseStatus})\n                if ([201, 200].includes(responseStatus)) {\n                    let responseData = await response.json() as ILoginInfo\n                    saveLoginToAppState(responseData)\n                    newNotification({\n                        id: new Date().getTime(),\n                        text: `Welcome mr/mrs ${responseData.firstName}`,\n                        variant: 'success'\n                    })\n                    history.push('/dashboard')\n                } else if ([404, 500].includes(responseStatus)) {\n                    let {message} = await response.json();\n                    newNotification({\n                        id: new Date().getTime(),\n                        text: message,\n                        variant: 'error'\n                    })\n                } else {\n                    newNotification({\n                        id: new Date().getTime(),\n                        text: 'Unknown error, please try later',\n                        variant: 'error'\n                    })\n                }\n            })\n            .catch(error => {\n                setSubmitting(false)\n            })\n    }\n\n    fields = [\n        {\n            name: 'username',\n            icon: IconMessage,\n            label: 'Username or Email address',\n        },\n    ]\n\n\n    render() {\n        return (\n            <Formik\n                initialValues={{\n                    email: 'bara@bara.ca',\n                    password: 'bara2019',\n                    firstname: 'bara2019',\n                    lastname: 'bara2019',\n                    username: 'bara2019',\n                    province: 'quebec',\n                    ref_id: 'quebec',\n                }}\n                onSubmit={(\n                    values: ISignUpFormValues,\n                    actions: FormikActions<ISignUpFormValues>\n                ) => {\n                    // this.login(values, actions.setSubmitting)\n                    console.log({logging: 'logging'})\n                }}\n                validationSchema={Yup.object().shape({\n                    email: Yup.string()\n                        .email(\"Email not valid\")\n                        .required(\"Email is required\"),\n                    password: Yup.string().required(\"Password is required\")\n                })}\n                render={({\n                             values,\n                             handleBlur,\n                             handleChange,\n                             submitForm,\n                             handleSubmit,\n                             isSubmitting,\n                             setSubmitting,\n                             errors,\n                             touched,\n                         }: FormikProps<ISignUpFormValues>) => (\n                    <div className={styles.container}>\n                        <div\n                            className={classes(\n                                styles.grid_system,\n                                styles.content\n                            )}\n                        >\n                            <span className={styles.title}>Create an account on Fraud-Busters</span>\n                            <span className={styles.sub_title}>Create a new Customer account in a minute</span>\n                            <BorderlessTextField\n                                otherClasses={{\n                                    label: styles.label\n                                }}\n                                label={\"Firstname\"}\n                                name={'firstname'}\n                                type={this.state.show_password ? 'text' : 'firstname'}\n                                value={values['firstname']}\n                                error={touched.firstname && Boolean(errors.firstname)}\n                                onChange={e => {\n                                    handleChange(e)\n                                    handleBlur(e)\n                                }}\n                                InputProps={{\n                                    startAdornment: <InputAdornment\n                                        position=\"start\"\n                                    >\n                                        <img src={IconPerson} className={styles.adornLeft}/>\n                                    </InputAdornment>,\n                                }}\n                            />\n\n                            <BorderlessTextField\n                                otherClasses={{\n                                    label: styles.label\n                                }}\n                                label={'Lastname'}\n                                name={'lastname'}\n                                type={this.state.show_password ? 'text' : 'lastname'}\n                                value={values['lastname']}\n                                error={touched.lastname && Boolean(errors.lastname)}\n                                onChange={e => {\n                                    handleChange(e)\n                                    handleBlur(e)\n                                }}\n                                InputProps={{\n                                    startAdornment: <InputAdornment\n                                        position=\"start\"\n                                    >\n                                        <img src={IconPerson} className={styles.adornLeft}/>\n                                    </InputAdornment>,\n                                }}\n                            />\n\n                            <BorderlessTextField\n                                otherClasses={{\n                                    label: styles.label\n                                }}\n                                label={\"Username\"}\n                                name={'username'}\n                                type={this.state.show_password ? 'text' : 'username'}\n                                value={values['username']}\n                                error={touched.username && Boolean(errors.username)}\n                                onChange={e => {\n                                    handleChange(e)\n                                    handleBlur(e)\n                                }}\n                                InputProps={{\n                                    startAdornment: <InputAdornment\n                                        position=\"start\"\n                                    >\n                                        <img src={IconKey} className={styles.adornLeft}/>\n                                    </InputAdornment>,\n                                }}\n                            />\n\n                            <BorderlessTextField\n                                otherClasses={{\n                                    label: styles.label\n                                }}\n                                label={\"email\"}\n                                name={'email'}\n                                type={this.state.show_password ? 'text' : 'email'}\n                                value={values['email']}\n                                error={touched.email && Boolean(errors.email)}\n                                onChange={e => {\n                                    handleChange(e)\n                                    handleBlur(e)\n                                }}\n                                InputProps={{\n                                    startAdornment: <InputAdornment\n                                        position=\"start\"\n                                    >\n                                        <img src={IconMessage} className={styles.adornLeft}/>\n                                    </InputAdornment>,\n                                }}\n                            />\n                            <BorderlessTextField\n                                otherClasses={{\n                                    label: styles.label\n                                }}\n                                label={'Province'}\n                                name={'province'}\n                                type={this.state.show_password ? 'text' : 'province'}\n                                value={values['province']}\n                                error={touched.province && Boolean(errors.province)}\n                                onChange={e => {\n                                    handleChange(e)\n                                    handleBlur(e)\n                                }}\n                                select\n                                InputProps={{\n                                    startAdornment: <InputAdornment\n                                        position=\"start\"\n                                    >\n                                        <img src={IconLeaf} className={styles.adornLeft}/>\n                                    </InputAdornment>,\n                                }}\n                            >\n                                {['quebec', 'Labrador'].map(text => <option value={text}>{text}</option>)}\n                            </BorderlessTextField>\n\n                            <BorderlessTextField\n                                otherClasses={{\n                                    label: styles.label\n                                }}\n                                label={\"Reference ID\"}\n                                name={'ref_id'}\n                                type={this.state.show_password ? 'text' : 'ref_id'}\n                                value={values['ref_id']}\n                                error={touched.ref_id && Boolean(errors.ref_id)}\n                                onChange={e => {\n                                    handleChange(e)\n                                    handleBlur(e)\n                                }}\n                                InputProps={{\n                                    startAdornment: <InputAdornment\n                                        position=\"start\"\n                                    >\n                                        <img src={IconKey} className={styles.adornLeft}/>\n                                    </InputAdornment>,\n                                }}\n                            />\n\n                            <div className={styles.actions}>\n                                <button className={styles.btn_register}>\n                                    Register\n                                </button>\n                            </div>\n                            <div className={styles.link}>\n                                Already have an account?&nbsp;<Link to='/auth/login' className={styles.link_signup}>Login\n                                here</Link>\n                            </div>\n\n\n                        </div>\n                    </div>\n                )}\n            />\n        );\n    }\n}\n\nconst MapStateToProps = (store: MyTypes.ReducerState) => {\n    return {\n        signed_in: store.auth.access_token !== '',\n    }\n}\n\nconst MapDispatchToProps = (dispatch: Dispatch<MyTypes.RootAction>) => ({\n    saveLoginToAppState: (loginInfo: ILoginInfo) => dispatch({type: AuthTypes.LOGIN, payload: loginInfo}),\n    newNotification: (notification: INotification) => dispatch({type: NotificationTypes.NEW, payload: notification}),\n})\n\nconst SignUpPage = connect(\n    MapStateToProps,\n    MapDispatchToProps\n)(SignUpPageComponent)\n\nexport {\n    SignUpPage\n}","import * as React from 'react';\nimport {connect} from \"react-redux\"\nimport {Dispatch} from \"redux\"\nimport * as MyTypes from \"MyTypes\"\nimport {Link, RouteComponentProps} from \"react-router-dom\"\nimport {\n    ILoginInfo,\n    AuthTypes,\n    NotificationTypes,\n    INotification,\n} from 'actions'\nimport {\n    AuthService,\n} from 'services'\nimport {\n    BorderlessTextField,\n} from \"components\"\nimport {Formik, FormikActions, FormikProps, Form, Field, FieldProps} from 'formik';\nimport {CircularProgress} from \"@material-ui/core\";\nimport * as Yup from 'yup'\nimport styles from './SignUpAdmin.module.scss'\nimport IconCategory from 'assets/imgs/icon_category.svg'\nimport IconEye from 'assets/imgs/icon_eye.svg'\nimport IconKey from 'assets/imgs/icon_key.svg'\nimport IconLeaf from 'assets/imgs/icon_leaf.svg'\nimport IconMessage from 'assets/imgs/icon_message.svg'\nimport IconPerson from 'assets/imgs/icon_person.svg'\nimport IconLock from 'assets/imgs/icon_lock.svg'\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport classes from 'classnames'\n\ninterface ISignUpAdminFormValues {\n    org_email: string;\n    password: string;\n    org_name: string;\n    province: string;\n    category: string;\n    org_licence_number: string;\n}\n\nexport interface SignUpAdminProps extends RouteComponentProps {\n    readonly sign_in?: boolean;\n    readonly saveLoginToAppState: (info: ILoginInfo) => void;\n    readonly newNotification: (info: INotification) => void;\n}\n\ninterface SignUpAdminState {\n    readonly sign_in: boolean;\n    readonly show_password: boolean;\n}\n\nclass SignUpAdminPageComponent extends React.Component<SignUpAdminProps, SignUpAdminState> {\n    readonly state: SignUpAdminState = {\n        sign_in: false,\n        show_password: false,\n    };\n\n    login = (\n        values: ISignUpAdminFormValues|any,\n        setSubmitting: any,\n    ) => {\n        const {\n            saveLoginToAppState,\n            newNotification,\n            history,\n        } = this.props\n        AuthService.login(values)\n            .then(async response => {\n                setSubmitting(false)\n                const responseStatus = response.status\n                console.log({responseStatus})\n                if ([201, 200].includes(responseStatus)) {\n                    let responseData = await response.json() as ILoginInfo\n                    saveLoginToAppState(responseData)\n                    newNotification({\n                        id: new Date().getTime(),\n                        text: `Welcome mr/mrs ${responseData.firstName}`,\n                        variant: 'success'\n                    })\n                    history.push('/dashboard')\n                } else if ([404, 500].includes(responseStatus)) {\n                    let {message} = await response.json();\n                    newNotification({\n                        id: new Date().getTime(),\n                        text: message,\n                        variant: 'error'\n                    })\n                } else {\n                    newNotification({\n                        id: new Date().getTime(),\n                        text: 'Unknown error, please try later',\n                        variant: 'error'\n                    })\n                }\n            })\n            .catch(error => {\n                setSubmitting(false)\n            })\n    }\n\n    fields = [\n        {\n            name: 'username',\n            icon: IconMessage,\n            label: 'Username or Email address',\n        },\n    ]\n\n\n    render() {\n        return (\n            <Formik\n                initialValues={{\n                    org_email: 'bara@bara.ca',\n                    password: 'bara2019',\n                    org_name: 'bara2019',\n                    province: 'quebec',\n                    category: 'quebec',\n                    org_licence_number: 'bara2019',\n                }}\n                onSubmit={(\n                    values: ISignUpAdminFormValues,\n                    actions: FormikActions<ISignUpAdminFormValues>\n                ) => {\n                    // this.login(values, actions.setSubmitting)\n                    console.log({logging: 'logging'})\n                }}\n                validationSchema={Yup.object().shape({\n                    email: Yup.string()\n                        .email(\"Email not valid\")\n                        .required(\"Email is required\"),\n                    password: Yup.string().required(\"Password is required\")\n                })}\n                render={({\n                             values,\n                             handleBlur,\n                             handleChange,\n                             submitForm,\n                             handleSubmit,\n                             isSubmitting,\n                             setSubmitting,\n                             errors,\n                             touched,\n                         }: FormikProps<ISignUpAdminFormValues>) => (\n                    <div className={styles.container}>\n                        <div\n                            className={classes(\n                                styles.grid_system,\n                                styles.content\n                            )}\n                        >\n                            <span className={styles.title}>Create an account on Fraud-Busters</span>\n                            <span className={styles.sub_title}>Create a new Administrators account in a minute</span>\n                            <BorderlessTextField\n                                otherClasses={{\n                                    label: styles.label\n                                }}\n                                label={'Name of organization'}\n                                name={'org_name'}\n                                type={this.state.show_password ? 'text' : 'org_name'}\n                                value={values['org_name']}\n                                error={touched.org_name && Boolean(errors.org_name)}\n                                onChange={e => {\n                                    handleChange(e)\n                                    handleBlur(e)\n                                }}\n                                InputProps={{\n                                    startAdornment: <InputAdornment\n                                        position=\"start\"\n                                    >\n                                        <img src={IconPerson} className={styles.adornLeft}/>\n                                    </InputAdornment>,\n                                }}\n                            />\n\n                            <BorderlessTextField\n                                otherClasses={{\n                                    label: styles.label\n                                }}\n                                label={'Province'}\n                                name={'province'}\n                                type={this.state.show_password ? 'text' : 'province'}\n                                value={values['province']}\n                                error={touched.province && Boolean(errors.province)}\n                                onChange={e => {\n                                    handleChange(e)\n                                    handleBlur(e)\n                                }}\n                                select\n                                InputProps={{\n                                    startAdornment: <InputAdornment\n                                        position=\"start\"\n                                    >\n                                        <img src={IconLeaf} className={styles.adornLeft}/>\n                                    </InputAdornment>,\n                                }}\n                            >\n                                {['quebec', 'Labrador'].map(text => <option value={text}>{text}</option>)}\n                            </BorderlessTextField>\n\n                            <BorderlessTextField\n                                otherClasses={{\n                                    label: styles.label\n                                }}\n                                label={'Category'}\n                                name={'category'}\n                                type={this.state.show_password ? 'text' : 'category'}\n                                value={values['category']}\n                                error={touched.category && Boolean(errors.category)}\n                                onChange={e => {\n                                    handleChange(e)\n                                    handleBlur(e)\n                                }}\n                                InputProps={{\n                                    startAdornment: <InputAdornment\n                                        position=\"start\"\n                                    >\n                                        <img src={IconCategory} className={styles.adornLeft}/>\n                                    </InputAdornment>,\n                                }}\n                            />\n\n                            <BorderlessTextField\n                                otherClasses={{\n                                    label: styles.label\n                                }}\n                                label={'Organization or Company license number'}\n                                name={'org_licence_number'}\n                                type={this.state.show_password ? 'text' : 'org_licence_number'}\n                                value={values['org_licence_number']}\n                                error={touched.org_licence_number && Boolean(errors.org_licence_number)}\n                                onChange={e => {\n                                    handleChange(e)\n                                    handleBlur(e)\n                                }}\n                                InputProps={{\n                                    startAdornment: <InputAdornment\n                                        position=\"start\"\n                                    >\n                                        <img src={IconKey} className={styles.adornLeft}/>\n                                    </InputAdornment>,\n                                }}\n                            />\n\n                            <BorderlessTextField\n                                otherClasses={{\n                                    label: styles.label\n                                }}\n                                label={'Organization email address'}\n                                name={'org_email'}\n                                type={this.state.show_password ? 'text' : 'org_email'}\n                                value={values['org_email']}\n                                error={touched.org_email && Boolean(errors.org_email)}\n                                onChange={e => {\n                                    handleChange(e)\n                                    handleBlur(e)\n                                }}\n                                InputProps={{\n                                    startAdornment: <InputAdornment\n                                        position=\"start\"\n                                    >\n                                        <img src={IconMessage} className={styles.adornLeft}/>\n                                    </InputAdornment>,\n                                }}\n                            />\n\n                            <div className={styles.actions}>\n                                <button className={styles.btn_register}>\n                                    Regiter\n                                </button>\n                            </div>\n                            <div className={styles.link}>\n                                Already have an account? <Link to='/auth/login' className={styles.link_signup}>Login\n                                here</Link>\n                            </div>\n\n                        </div>\n                    </div>\n                )}\n            />\n        );\n    }\n}\n\nconst MapStateToProps = (store: MyTypes.ReducerState) => {\n    return {\n        signed_in: store.auth.access_token !== '',\n    }\n}\n\nconst MapDispatchToProps = (dispatch: Dispatch<MyTypes.RootAction>) => ({\n    saveLoginToAppState: (loginInfo: ILoginInfo) => dispatch({type: AuthTypes.LOGIN, payload: loginInfo}),\n    newNotification: (notification: INotification) => dispatch({type: NotificationTypes.NEW, payload: notification}),\n})\n\nconst SignUpAdminPage = connect(\n    MapStateToProps,\n    MapDispatchToProps\n)(SignUpAdminPageComponent)\n\nexport {\n    SignUpAdminPage\n}","import * as React from 'react';\nimport styles from './ResultsComponent.module.scss'\nimport { BorderlessTextField } from \"../../components\";\nimport classNames from 'classnames'\nimport { Button, IconButton } from \"@material-ui/core\";\nimport {\n    PlayArrowRounded,\n    PauseRounded,\n    StopRounded,\n    CloudUploadRounded\n} from '@material-ui/icons'\nimport Typography from \"@material-ui/core/Typography/Typography\";\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport { useEffect } from \"react\";\nimport { URLSearchParams } from \"url\";\nimport * as MyTypes from \"MyTypes\";\nimport { Dispatch } from \"redux\";\nimport { INewSources, INotification, NotificationTypes, SourcesTypes } from \"../../actions\";\nimport { connect } from 'react-redux'\nimport { hostIp, hostPort } from \"../../services/urls\";\n\ndeclare var Paho: any;\n\n\nexport interface ResultsPageComponentState {\n    readonly open?: boolean;\n    readonly query?: string;\n    readonly data?: string[];\n}\n\nexport interface ResultsPageComponentProps {\n    readonly sources?: INewSources[];\n    readonly newNotification: (info: INotification) => void;\n    readonly newSources: (info: INewSources[]) => void;\n    readonly saveData: (data) => void;\n    readonly saveResult: (data) => void;\n}\n\nclass ResultsPageComponent extends React.Component<ResultsPageComponentProps & RouteComponentProps> {\n    state = {\n        data: [],\n        results: [],\n        query: '',\n        open: false,\n    }\n\n    dataTopicClient;\n    resultTopicClient;\n    dataTopic = 'data_topic';\n    resultTopic = 'result_topic';\n\n    subscribeToDataTopic = () => {\n        this.resultTopicClient = new Paho.MQTT.Client(hostIp, Number(hostPort), \"clientId62\");\n        console.log({ client: this.resultTopicClient })\n        let {\n            newNotification,\n            // newSources,\n        } = this.props\n\n        // called when the this.resultTopicClient connects\n        const onConnect = () => {\n            // Once a connection has been made, make a subscription and send a message.\n            this.resultTopicClient.subscribe(this.dataTopic)\n            console.log({ connected: true })\n        }\n\n        // called when the this.resultTopicClient loses its connection\n        const onConnectionLost = (responseObject) => {\n            if (responseObject.errorCode !== 0) {\n                newNotification({\n                    id: new Date().getTime(),\n                    text: 'on disconnect listening to specific topics',\n                    variant: 'error'\n                })\n                console.log(\"onConnectionLost here:\" + responseObject.errorMessage);\n            }\n        }\n\n        // called when a message arrives\n        const onMessageArrived = (message) => {\n            // newSources(sources)\n            const payloadString = message.payloadString;\n            // console.log({message})\n            this.setState({ data: [...this.state.data, payloadString] })\n            this.onScroll()\n            setTimeout(() => {\n                this.props.saveData(this.state.data)\n            }, 300);\n        }\n\n        // set callback handlers\n        this.resultTopicClient.onConnectionLost = onConnectionLost;\n        this.resultTopicClient.onMessageArrived = onMessageArrived;\n\n        // connect the this.resultTopicClient\n        this.resultTopicClient.connect({ onSuccess: onConnect });\n    }\n\n    subscribeToResultTopic = () => {\n        this.dataTopicClient = new Paho.MQTT.Client(hostIp, Number(hostPort), \"clientId41\");\n        let {\n            newNotification,\n            // newSources,\n        } = this.props\n\n        // called when the this.dataTopicClient connects\n        const onConnect = () => {\n            // Once a connection has been made, make a subscription and send a message.\n            this.dataTopicClient.subscribe(this.resultTopic)\n            console.log({ connected: true })\n        }\n\n        // called when the this.dataTopicClient loses its connection\n        const onConnectionLost = (responseObject) => {\n            //do nothing as the listener for dataTopic will show the error, same for on connect.\n            newNotification({\n                id: new Date().getTime(),\n                text: 'on disconnect listening to on result topics',\n                variant: 'error'\n            })\n        }\n\n        // called when a message arrives\n        const onMessageArrived = (message) => {\n            const payloadString = message.payloadString;\n            this.setState({ results: [...this.state.results, payloadString] })\n            this.onScroll()\n            setTimeout(() => {\n                this.props.saveResult(this.state.results)\n            }, 300);\n        }\n\n        // set callback handlers\n        this.dataTopicClient.onConnectionLost = onConnectionLost;\n        this.dataTopicClient.onMessageArrived = onMessageArrived;\n\n        // connect the this.dataTopicClient\n        this.dataTopicClient.connect({ onSuccess: onConnect });\n    }\n\n    onMount = () => {\n        this.subscribeToResultTopic()\n        this.subscribeToDataTopic()\n    }\n\n    componentDidMount() {\n        if (localStorage['reload'] === 'true') {\n            localStorage['reload'] = false\n            window.location.reload();\n        }\n        this.onMount();\n    }\n\n    componentWillUnmount() {\n        this.dataTopicClient.disconnect()\n        this.resultTopicClient.disconnect()\n    }\n\n    onScroll = () => {\n\n        //results box\n        let resultsBox = document.getElementById('results');\n        //@ts-ignore\n        let xHResult = resultsBox.scrollHeight;\n        //@ts-ignore\n        resultsBox.scrollTo({\n            top: xHResult,\n            left: 0,\n            behavior: \"smooth\"\n        });\n\n        //data box\n        let dataBox = document.getElementById('data');\n        //@ts-ignore\n        let xHBox = dataBox.scrollHeight;\n        //@ts-ignore\n        dataBox.scrollTo(\n            {\n                top: xHBox,\n                left: 0,\n                behavior: \"smooth\"\n            });\n    }\n\n    /**\n     * resolution to this method gotten from\n     * https://javascript.info/file\n     */\n    onFileDroped = filesData => {\n        // @ts-ignore\n        var fileToLoad = document.getElementById(\"input_file\").files[0];\n\n        var fileReader = new FileReader();\n        fileReader.onload = function (fileLoadedEvent) {\n            // @ts-ignore\n            var textFromFileLoaded = fileLoadedEvent.target.result;\n            // @ts-ignore\n            this.setState({ query: textFromFileLoaded })\n        };\n\n        fileReader.readAsText(fileToLoad, \"UTF-8\");\n    }\n\n    handleAction = (type: 'play' | 'stop') => () => {\n        let message = new Paho.MQTT.Message(type);\n        message.destinationName = \"client_actions\";\n        this.dataTopicClient.send(message);\n    }\n\n    render() {\n        const {\n            match: { url },\n        } = this.props\n\n        const {\n            data,\n            results,\n        } = this.state\n\n        return (\n            <div className={styles.container}>\n                <Typography className={styles.heading} variant={'h2'} align={'center'}>View Results and Multiple RDF graph streams</Typography>\n                <div\n                    className={classNames(\n                        styles.box_section,\n                        styles.query_actions,\n                    )}\n                >\n                    {/* <IconButton onClick={this.handleAction('play')}>\n                        <PlayArrowRounded />\n                    </IconButton> */}\n                    <span></span>\n                    <IconButton onClick={this.handleAction('stop')}>\n                        <StopRounded />\n                    </IconButton>\n                    <span></span>\n                </div>\n                <div\n                    className={classNames(\n                        styles.grid_width_full,\n                        styles.responsive_columns,\n                    )}\n                >\n                    <div\n                        className={classNames(\n                            styles.box_section,\n                        )}\n                    >\n                        <span>FUSION MATCHES</span>\n                        <span className={styles.box} id='results'>\n                            {results.map(result => (\n                                <span>{result}</span>\n                            ))}\n                        </span>\n                    </div>\n                    <div\n                        className={classNames(\n                            styles.box_section,\n                        )}\n                    >\n                        <span>MULTIPLE RDF GRAPH STREAMS</span>\n                        <span className={styles.box} id='data'>\n                            {data.map(datum => (\n                                <span>{datum}</span>\n                            ))}\n                        </span>\n                    </div>\n                </div>\n                <div\n                    className={classNames(\n                        styles.grid_width_full,\n                    )}\n                    style={{\n                        justifyItems: 'flex-end',\n                        display: 'grid',\n                    }}\n                >\n                    <Button component={Link} to={`${url}/stats`}>See statistics</Button>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nconst MapStateToProps = (store: MyTypes.ReducerState) => {\n    return {\n        sources: store.sources\n    }\n}\n\nconst MapDispatchToProps = (dispatch: Dispatch<MyTypes.RootAction>) => ({\n    newNotification: (notification: INotification) => dispatch({ type: NotificationTypes.NEW, payload: notification }),\n})\n\nconst ResultsPage = connect(\n    MapStateToProps,\n    MapDispatchToProps\n)(ResultsPageComponent)\n\nexport {\n    ResultsPage,\n}\n","import React, { useEffect, useState } from 'react';\nimport styles from './StatsComponent.module.scss'\nimport { AssetSummaryGraph } from 'components';\nimport { withStyles, Theme, createStyles, makeStyles } from '@material-ui/core/styles';\nimport {\n  Paper,\n  Typography,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  Button,\n  TableRow,\n} from '@material-ui/core';\nimport jsPDF from 'jspdf'\nimport html2canvas from 'html2canvas'\n\n\nexport interface StatsPageComponentProps {\n  readonly dumm?: boolean;\n  readonly data?: any;\n  readonly result?: any;\n}\n\ninterface StatsPageComponentState {\n  readonly open: boolean;\n}\n\nconst StyledTableCell = withStyles((theme: Theme) =>\n  createStyles({\n    head: {\n      backgroundColor: theme.palette.common.black,\n      color: theme.palette.common.white,\n    },\n    body: {\n      fontSize: 14,\n    },\n  }),\n)(TableCell);\n\nconst StyledTableRow = withStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      '&:nth-of-type(odd)': {\n        backgroundColor: theme.palette.background.default,\n      },\n    },\n  }),\n)(TableRow);\n\nfunction createData(name: string, calories: number, fat: number, carbs: number, protein: number) {\n  return { name, calories, fat, carbs, protein };\n}\n\nconst rows = [\n  createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\n  createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\n  createData('Eclair', 262, 16.0, 24, 6.0),\n  createData('Cupcake', 305, 3.7, 67, 4.3),\n  createData('Gingerbread', 356, 16.0, 49, 3.9),\n];\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: '100%',\n      marginTop: theme.spacing(3),\n      overflowX: 'auto',\n    },\n    table: {\n      minWidth: 700,\n    },\n  }),\n);\n\nconst StatsPageComponent: React.FC<StatsPageComponentProps> = (props) => {\n  const [open, setOpen] = React.useState<boolean>(false)\n  const [tableData, saveTabledata] = React.useState<any>({})\n  const classes = useStyles();\n  const {\n    result,\n    data,\n  } = props\n\n  useEffect(() => {\n    //count the total number of result sets using\n    // the total number of occurences of events timestamps.\n    const tableData1 = result.reduce((acc, res) => {\n      if (`${res}`.startsWith('[')) {\n        const [starttime, endtime] = `${res.substring(1, res.length - 2)}`.split(',')\n        acc.values[acc.values.length - 1].push(starttime, endtime)\n\n        //create the 2nd dimension new array here\n        acc.values.push([])\n        acc.resultNumberSet = acc.resultNumberSet + 1\n      } else if (`${res}`.startsWith('?')) {\n        const [header, ...value] = `${res.substring(1, res.length - 1)}`.split(' ')\n        acc.headers[header] = true\n        acc.values[acc.values.length - 1].push(value.join(' '))\n      }\n      return acc\n    }, {\n      values: [[]],\n      resultNumberSet: 0,\n      headers: {},\n    })\n\n    saveTabledata(tableData1)\n  }, [result])\n\n  const effect = useEffect(() => {\n    localStorage['reload'] = true\n  }, [])\n\n  const anotherGenerate = (base64Img, name) => {\n    let doc = new jsPDF('l', 'cm', 'a4');\n    doc.addImage(base64Img, 'png', 0.5, 0.5, 28.7, 25)\n    doc.save(`${name}.pdf`);\n  }\n\n  const pdfGenerate = () => {\n    //@ts-ignore\n    html2canvas(document.querySelector(\"#content\")).then(canvas => {\n      // document.body.appendChild(canvas)\n      anotherGenerate(canvas.toDataURL(\"image/png;base64\"), 'results')\n    });\n  }\n\n  let {\n    resultNumberSet,\n    headers = {},\n    values = [],\n  } = tableData\n\n  headers = {\n    ...headers,\n    StartTime: true,\n    EndTime: true,\n  }\n\n\n  return (\n    <div className={styles.container}>\n      <Typography\n        className={styles.heading}\n        variant={'h2'}\n        align='center'\n      >\n        Statistics on queried data\n      </Typography>\n      <AssetSummaryGraph data={data} />\n      <Paper className={classes.root}>\n        <Table className={classes.table}>\n          <TableHead>\n            <TableRow>\n              {/* <StyledTableCell>Dessert (100g serving)</StyledTableCell> */}\n              {Object.keys(headers).map(key => (\n                <StyledTableCell align=\"left\">{key}</StyledTableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {values.map(row => (\n              <StyledTableRow key={row.name}>\n                {row.map(rowItem => (\n                  <StyledTableCell align=\"left\">{rowItem}</StyledTableCell>\n                ))}\n              </StyledTableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </Paper>\n      <Button variant={'contained'} onClick={pdfGenerate} className={styles.btn_download}>\n        Download results in PDF format\n      </Button>\n    </div>\n  );\n}\n\nexport {\n  StatsPageComponent as StatsPage\n}\n","import * as MyTypes from \"MyTypes\";\nimport {ILoginInfo, AuthTypes} from 'actions'\n\nconst userInfo = localStorage['user_info']\n\nconst saveUserInfo = (userInfo: ILoginInfo) => {\n    localStorage['user_info'] = JSON.stringify(userInfo)\n}\n\nconst logout = () => {\n    localStorage.clear()\n}\n\nconst getLocalStorageUserInfo = (): ILoginInfo => {\n    let userInfoString = localStorage['user_info']\n    let initialState: ILoginInfo = {\n        access_token: '',\n        expires_in: 0,\n        token_type: '',\n        username: '',\n        firstName: '',\n        lastName: '',\n        email: '',\n        is_candidate: false,\n        is_admin: false,\n        is_technicien: false,\n        is_publique: false,\n\n    }\n    if (userInfoString && Boolean(userInfoString) && localStorage['user_info'] !== '') {\n        initialState = JSON.parse(userInfoString);\n    }\n    return initialState;\n}\n\nexport const initialState: ILoginInfo = getLocalStorageUserInfo();\n\n\nexport const authReducer = (state: ILoginInfo = initialState, action: MyTypes.RootAction) => {\n    switch (action.type) {\n        case AuthTypes.LOGOUT: {\n            logout()\n            return {} as ILoginInfo;\n        }\n        case AuthTypes.LOGIN: {\n            saveUserInfo(action.payload)\n            return action.payload;\n        }\n        default:\n            return initialState;\n    }\n};\n","import * as MyTypes from \"MyTypes\";\nimport {NotificationTypes} from 'actions/NotificationTypes'\nimport {INotification} from 'actions'\n\nexport const initialState: INotification = {\n    id: 0,\n    text: '',\n    variant: 'success',\n\n};\n\nexport const NotificationReducer = (state: INotification = initialState, action: MyTypes.RootAction) => {\n    switch (action.type) {\n        case NotificationTypes.NEW: {\n            return action.payload;\n        }\n        default:\n            return initialState;\n    }\n};\n","import * as MyTypes from \"MyTypes\";\nimport {SourcesTypes} from 'actions'\nimport {INewSources} from 'actions'\n\nexport const initialState: INewSources[] = [];\n\nexport const SourcesReducer = (state: INewSources[] = initialState, action: MyTypes.RootAction) => {\n    console.log({load: action.payload})\n    switch (action.type) {\n        case SourcesTypes.NEW_SOURCES: {\n            return action.payload;\n        }\n        default:\n            return state;\n    }\n};\n","import { combineReducers } from \"redux\";\nimport { authReducer } from \"./AuthReducers\";\nimport { NotificationReducer } from \"./NotificationReducers\";\nimport { SourcesReducer } from \"./SourcesReducers\";\n\nconst rootReducer = combineReducers({\n    auth: authReducer,\n    notification: NotificationReducer,\n    sources:SourcesReducer,\n});\n\nexport default rootReducer;","import { createStore, applyMiddleware } from \"redux\";\nimport rootReducer from \"reducers\";\n\nconst store = createStore(rootReducer);\n\nexport default store;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {BrowserRouter as Router, Route, Link, Switch, Redirect} from \"react-router-dom\";\nimport {\n    EntryPage, AuthPage,\n} from './pages';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport {Provider} from \"react-redux\";\nimport store from \"./store/store\";\nimport {NotificationComponent} from 'components'\n\nconst App: React.FC = () => {\n    return (\n        <Provider store={store}>\n            <Router>\n                <NotificationComponent/>\n                <CssBaseline/>\n                <div className=\"App\">\n                    <Switch>\n                        <Route\n                            path={'/dashboard'}\n                            component={EntryPage}\n                        />\n                        <Route\n                            path={'/auth'}\n                            component={AuthPage}\n                        />\n                        <Redirect to={\"/dashboard\"}/>\n                    </Switch>\n                </div>\n            </Router>\n        </Provider>\n\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all dataTopicClient tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/icon_message.f93544c0.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"NotificationWrapper_message__26Oxq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"BorderlessTextField_container__1IACC\",\"textfield_input\":\"BorderlessTextField_textfield_input__P92Md\",\"textfield_root\":\"BorderlessTextField_textfield_root__1twb5\",\"label\":\"BorderlessTextField_label__Yl7G7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Auth_container__yXfPO\",\"background\":\"Auth_background__1tNtq\",\"content\":\"Auth_content__1oQMg\",\"grid_system\":\"Auth_grid_system__2Nxpd\",\"logo\":\"Auth_logo__17Ci2\"};","module.exports = __webpack_public_path__ + \"static/media/icon_key.c616cb6f.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon_person.fdc4a338.svg\";"],"sourceRoot":""}